import { EventEmitter } from 'events'
const அங்கீகாரம் = () => import('./அங்கீகாரம்')
import { ஞாபகமாறிகள் } from './தகவல்கள்'
import { நிகழ்வுகளையிணையு } from './கருவிகள்'

const தரவுத்தளத்தை_உருவாக்கு = () => import('./தத')
const நிலைகள் = {
  வெளி: 'வெளியேறிக்கப்பட்டுள்ளது',
  ஏற்று: 'ஏற்றுகொண்டிருக்கு',
  துவக்க: 'துவக்கப்பட்டுள்ளது',
  உள்: 'உள்நுழைக்கப்பட்டுள்ளது'
}


class கணக்கு extends EventEmitter{
  constructor () {
    super()
    this._நிலை = நிலைகள்.வெளி

    const இணையம் = localStorage.getItem(ஞாபகமாறிகள்.இணையம்)
    this._இணையம் = இணையம் === undefined ? true : இணையம் === 'true'
    if (localStorage.getItem(ஞாபகமாறிகள்.சூழல்)) this.அங்கீகாரம்_ஆரம்பு()
    const மூல்முகவரி = localStorage.getItem(ஞாபகமாறிகள்.மூல்முகவரி)
    if (மூல்முகவரி) this.தத_ஆரம்பு(மூல்முகவரி)
  }

  async பயனாளர்_உருவாக்கு(பயனாளர்பெயர், சாதனம்பெயர்) {
    await this.அங்கீகாரம்_ஆரம்பு()
    this.அங்கீகாரம்.பயனாளர்_உருவாக்கு(பயனாளர்பெயர், சாதனம்பெயர்)
    await this.தத_ஆரம்பு()
    localStorage.setItem(this.ஞாபகமாறிகள்.மூல்முகவரி, this.தத.மூல்முகவரி)
  }

  async அங்கீகாரம்_ஆரம்பு() {
    this.நிலை = நிலைகள்.ஏற்று
    const அங்கீ = await அங்கீகாரம்()
    this.அங்கீகாரம் = new அங்கீ.default(this.இணையம், ()=>{return this.வணக்கம்()})
    this.அங்கீகாரம்.on('புது குழு', (குழுவேர்)=>{
      this.புது_குழு = குழுவேர்
      this.emit('புது குழு', குழுவேர்)
    })
    நிகழ்வுகளையிணையு(this.அங்கீகாரம், this, ['திரளிணைப்பு மாற்றம்'])

    this.நிலை = நிலைகள்.துவக்க
    this.emit('அங்கீகாரம் தயார்')
  }

  async தத_ஆரம்பு(முகவரி){
    const செயலி = await தரவுத்தளத்தை_உருவாக்கு()
    console.log(செயலி)
    if (!this.பயனாளர்_அடையாளம்) throw 'வெளியேறிக்கப்பட்டுள்ளீர்கள்! தரவுத்தளத்தை ஆரம்ப முடியாது.'
    this.தத = await செயலி.default.உருவாக்கு(this.பயனாளர்_அடையாளம், ()=> this.அங்கீகாரம்.கையெழுத்துசரிபார்ப்பு(), முகவரி)
    நிகழ்வுகளையிணையு(this.தத, this, ['தத மாற்றம்'])
    this.நிலை = நிலைகள்.உள்
    this.emit('தத தயார்', undefined)
  }

  வணக்கம்() {
    if (!this.தத) return
    return {
      வகை: 'வணக்கம்',
      பயனாளர்_அடையாளம்: this.அங்கீகாரம்.சூழல்.user.userName,
      சாதனம்_அடையாளம்: this.அங்கீகாரம்.சூழல்.device.deviceName,
      கோள்பாதை_அடையாளம்: this.தத.கோள்பாதை.identity.id,
      மூல்தத_முகவரி: this.தத.மூல்முகவரி
    }
  }

  திரளிணைப்பை_நீக்கு(இ) {
    if (!this.அங்கீகாரம்) return
    this.அங்கீகாரம்.திரளிணைப்பை_நீக்கு(இ)
  }

  get பயனாளர்_அடையாளம்() {
    if (this.அங்கீகாரம்) return this.அங்கீகாரம்.பயனாளர்_அடையாளம்
    return undefined
  }

  get பயனாளர்() {
    if (!this.அங்கீகாரம்) return []
    return this.அங்கீகாரம்.பயனாளர்
  }

  get சாதனம்() {
    if (!this.அங்கீகாரம்) return []
    return this.அங்கீகாரம்.சாதனம்
  }

  get சாதனங்கள்() {
    if (!this.அங்கீகாரம்) return []
    return this.அங்கீகாரம்.சாதனங்கள்
  }

  get மேலாளர்_உரிமை() {
    if (!this.அங்கீகாரம்) return false
    return this.அங்கீகாரம்.மேலாளர்_உரிமை
  }

  get திரள்_இணைப்புகள்() {
    if (!this.அங்கீகாரம்) return {}
    return this.அங்கீகாரம்.திரள்_இணைப்புகள்
  }

  get நிலை() {
    return this._நிலை
  }

  set நிலை(மதிப்பு) {
    if (this._நிலை === மதிப்பு) return
    this._நிலை = மதிப்பு
    this.emit('நிலை மாற்றம்', மதிப்பு)
  }

  get இணையம்() {
    return this._இணையம்
  }

  set இணையம்(மதிப்பு) {
    if (this._இணையம் === மதிப்பு) return
    localStorage.setItem(ஞாபகமாறிகள்.இணையம், மதிப்பு)
    if (this.அங்கீகாரம்) this.அங்கீகாரம்.இணையம் = மதிப்பு
    this._இணையம் = மதிப்பு
    this.emit('இணையம் மாற்றம்', மதிப்பு)
  }

}
/*


const toBuffer = require('it-to-buffer')



const நிகழ்வுகள் = {
  பயனாளர்மாற்றம்: 'பயனாளர் மாற்றம்'
}

class கணக்கு extends EventEmitter{
  constructor () {
    super()

    if (this.பயனாளர்) {

      const தத_முகவரி = localStorage.getItem('மூல்_தத_முகவரி')
      this.சகோயமை_ஆரம்பம்().then(
        () => {
          this.குழு_பெறு()
          தரவுத்தளங்களை_உருவாக்கு(this, தத_முகவரி)
          this.திரள்_ஆரம்பம்()
        }
      )

    }

    this.on('பயனாளர் மாற்றம்', ()=>{
      this.பயனாளர் ? this.திரள்_ஆரம்பம்() : this.திரள்_மூடி()
    })
    window.கணக்கு = this
  }

  அழைப்பால்_உள்ளிடு(அழைப்பு) {
    if (!this.அடையாளம்) throw 'பயனாளர் கிடைக்கவில்லை'
    const ஆதாரம் = generateProof(அழைப்பு, this.அடையாளம்)

  }

  async இரண்டாவது_கணக்காக_உள்ளிடு(அழைப்பு) {
    //
    this.திரள்.on(நிகவழ்வு.மூல்முகவரி, (முகவரி) => {
      this.தத = new தத(முகவரி)
    })
    this.திரள.மூல்முகவரி_பெறு()

  }

  set பயனாளர்(பயனாளர்) {
    this._பயனாளர் = பயனாளர்
    this.emit(நிகழ்வுகள்.பயனாளர்மாற்றம்)
  }

  get அடையாளம்() {
    return this.பயனாளர் ? this.பயனாளர்.userName : undefined
  }

  // À vérifier

  குழு_பெறு () {

    this.குழு.on('updated', (தகவல்கள்)=>{
      this.குழு_சேமி()
      this.emit('குழு மாற்றம்', {தலை: தகவல்கள்.head})
      for (var s of Object.values(this.திரள்_இணைப்புகள்)) {
        this.குழு_தலை_அனுப்பு(s, தகவல்கள்.head)
      }
    })
    this.emit('குழு மாற்றம்')
  }

  async அழைப்பால்_உள்ளிடு (அழைப்பு, பயனாளர்பெயர், சாதனம்பெயர்) {
    const பயனாளர் = this.பயனாளர்_உருவாக்கி(பயனாளர்பெயர், சாதனம்பெயர்)
    this.துவக்கம்(பயனாளர்)
    this.குழு_சேரு()
  }

  get உரிமைக்கப்பட்ட_மொழிகள் () {
    if (!this.குழு || !this.குழு.has(this.பயனாளர்_அடையாளம்)) return []
    return this.குழு.roles().filter((மொழி)=>{this.குழு.memberHasRole(this.பயனாளர்_அடையாளம், மொழி)})
  }


  அழைக்க (பெயர், மொழிகள்) {
    if (மொழிகள்) {
      this._பங்கு_உறுதிசெய்ய(மொழிகள்)
      return this.குழு.invite(பெயர், { roles: மொழிகள் })
    }
    const அழைப்பு = this.குழு.invite(பெயர்)
    this.குழு_சேமி()
    return அழைப்பு
  }

  மொழிக்கு_அனுமதிக்க (பெயர், மொழிகள்) {
    this._பங்கு_உறுதிசெய்ய(மொழிகள்)
    for (let மொழி of மொழிகள்) {
      this.குழு.addMemberRole(பெயர், மொழி)
    }
  }

  get அழைப்புகள் () {
    if (!this.குழு) return []
    return this.குழு.state.invitations
  }

  get நிலை () {
    // இணையம் நிலை
    if (this.பயனாளர்) {
      return this.குழு && this.குழு.has(this.பயனாளர்_அடையாளம்) ? உள் : துவக்க
    }
    return வெளி
  }

  _பங்கு_உறுதிசெய்ய (மொழிகள்) {
    for (let மொழி of மொழிகள்) {
      if (!this.குழு.hasRole(மொழி)) {
        this.குழு.addRole(மொழி)
      }
    }
  }

}

*/
/*
class தரவுத்தளங்கள் {
  async ஆரம்பம் (தத_முகவரி) {

    // மூல் தரவுத்தளம்
    this.பயனாளர்_தரவுத்தளம் = await this._தத_உருவாக்கி('பயனாளர்', 'kvstore', தத_முகவரி)
    await this.பயனாளர்_தரவுத்தளம்.load()

    // மொழியாக்கத்திட்டங்கள்
    this.திட்ட_தத = await this._தத_உருவாக்கி('திட்டங்கள்', 'kvstore', this.பயனாளர்_தரவுத்தளம்)
    await this.திட்ட_தத.load()

    // இந்த பயனாளர் (நீங்கள்)
    this.பெயர்_தரவுத்தளம் = await this._தத_உருவாக்கி('பயனாளர்பெயர்கள்', 'kvstore', this.பயனாளர்_தரவுத்தளம்)
    await this.பெயர்_தரவுத்தளம்.load()

    // கூடபணியாளர்கள்
    this.கூடபணியாளர்கள்_தரவுத்தளம் = await this._தத_உருவாக்கி('கூடபணியாளர்கள்', 'kvstore', this.பயனாளர்_தரவுத்தளம்)
    await this.கூடபணியாளர்கள்_தரவுத்தளம்.load()

    this.கணக்கு.on('குழு மாற்றம்', this.கூடபணியாளர்களை_உறுதிசெய்யு.bind(this))
    await this.கூடபணியாளர்களை_உறுதிசெய்யு()

    this.கூடபணியாளரகளுடன்_இணைய_இடைவெளி = setInterval(this.கூடபணியாளரகளுடன்_இணையு.bind(this), 10000)
    await this.கூடபணியாளரகளுடன்_இணையு()

    this.தயார் = true
    this.அறிக்கை('தத தயார்')
  }

  கூடபயனாளர்_சேரு(உள்ளடக்கம்) {
    console.log(உள்ளடக்கம்)
    if (!this.கணக்கு.குழு.verify(உள்ளடக்கம்)) return
    console.log('vérifié')
    const மூல்_தத = உள்ளடக்கம்.contents.பயனாளர்_தரவுத்தளம்
    this.கூடபணியாளர்கள்_தரவுத்தளம்.set(மூல்_தத, உள்ளடக்கம்)
    this.கூடபணியாளருடன்_இணையு()
  }

  async கூடபணியாளர்களை_உறுதிசெய்யு() {
    return
    // const இணைக்கப்பட்ட_அடையாளங்கள் = await this.சகோயமை_கூடபணியாளர்கள்()
    // for (var [கணுயடையாளம், உள்ளடக்கம்] of this.கூடபணியாளர்கள்_தரவுத்தளம்.all) {
    //   if (!this.கணக்கு.குழு.verify(உள்ளடக்கம்)) {
    //     await this.கூடபணியாளர்கள்_தரவுத்தளம்.del(கணுயடையாளம்)
    //   }
    // }
  }

  async கூடபணியாளரகளுடன்_இணையு () {
    return

    const அடையாளங்கள் = Object.values(this.கூடபணியாளர்கள்_தரவுத்தளம்.all).map(
      கூடபணியாளர் => கூடபணியாளர்.கணுயடையாளம்
    ).filter()
    const இணைக்கப்பட்ட_அடையாளங்கள் = await this.சகோயமை_கூடபணியாளர்கள்()
    await Promise.all(அடையாளங்கள்.map(async (அடையாளம்) => {
      if (இணைக்கப்பட்ட_அடையாளங்கள்.indexOf(அடையாளம்) !== -1) return
      try {
        await this.கூடபணியாளருடன்_இணையு(அடையாளம்)
      } catch (பிழை) {
        console.log(பிழை)
      }
    }))

  }

  async சகோயமை_கூடபணியாளர்கள்() {
    const கூடபணியாளர்கள் = await this.கணு.swarm.peers()
    return கூடபணியாளர்கள்
  }

  async _திட்டம்_தத_ஏற்று(திட்டம்) {
    const முகவரி = await this.திட்ட_தத.get(திட்டம்)
    var தத

    if (முகவரி) {
      தத = await this.கோள்பாதை.kvstore(முகவரி)
    } else {
      தத = await this.கோள்பாதை.kvstore(திட்டம், this.தனிப்பட்டவமைப்புகள)
      await this.திட்ட_தத.set(திட்டம், தத.id)
    }
    await தத.load()
    return தத
  }

  async _மொழி_தத_ஏற்று(திட்டம், வேண்டியமொழி) {

    const திட்டம்_தத = await this._திட்டம்_தத_ஏற்று(திட்டம்)
    var முகவரி = await திட்டம்_தத.get(வேண்டியமொழி)
    if (முகவரி) {
      தத = await திட்டம்_தத.del(முகவரி)
      முகவரி=undefined
    }
    var தத

    if (முகவரி) {
      தத = await this.கோள்பாதை.kvstore(முகவரி)
    } else {
      தத = await this.கோள்பாதை.kvstore(`${திட்டம்}-${வேண்டியமொழி}`, this.தனிப்பட்டவமைப்புகள)
      await திட்டம்_தத.set(வேண்டியமொழி, தத.id)
    }

    await தத.load()
    return தத
  }

  async _பரிந்துரை_தத_ஏற்று(திட்டம், வேண்டியமொழி) {
    console.log(திட்டம், வேண்டியமொழி)
    const மொழி_தத = await this._மொழி_தத_ஏற்று(திட்டம், வேண்டியமொழி)
    const முகவரி = await மொழி_தத.get('பரிந்துரைகள்')
    var தத

    if (முகவரி) {
      தத = await this.கோள்பாதை.kvstore(முகவரி)
    } else {
      தத = await this.கோள்பாதை.kvstore(`${திட்டம்}-${வேண்டியமொழி}-பரிந்துரைகள்`, this.தனிப்பட்டவமைப்புகள)
      await மொழி_தத.set('பரிந்துரைகள்', தத.id)
    }
    for (let இ of ['write', 'replicated']) {
      தத.events.on(இ, ()=>this.அறிக்கை('தரவுத்தளம் மாற்றம்', {
        'தரவுத்தளம்': 'பரிந்துரை',
        திட்டம்,
        'மொழி': வேண்டியமொழி
      }))
    }
    await தத.load()
    return தத
  }

  async பரிந்துரையு(சாபி, உரை, மூலுரை, மூல்மொழி, வேண்டியமொழி, திட்டம்) {

  }

  async பரிந்துரையைநீக்கு(குறி, வேண்டியமொழி, திட்டம்) {
    const தத = await this._பரிந்துரை_தத_ஏற்று(திட்டம், வேண்டியமொழி)
    console.log(குறி)
    await தத.del(குறி)
    console.log(தத.all)
  }

}
*/

export default {
  install (Vue) {
    Vue.prototype.$கணக்கு = new கணக்கு()
    window.கணக்கு = Vue.prototype.$கணக்கு
  }
}
